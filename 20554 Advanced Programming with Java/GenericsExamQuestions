/*Question page 79 in Hen's pdf from exam*/
import java.util.Stack;

public class Main {

    public static void main(String[] args) {
	Stack<Integer> testStack = new Stack<>();
        testStack.push(6);
        testStack.push(3);
        testStack.push(7);
        testStack.push(1);
        Integer e = 5;
        System.out.println( testStack.toString());
        Stack<Integer> resStack = reduceStack(testStack,e);
        System.out.println(resStack);

    }

    public static <e extends  Comparable<e>> Stack<e> reduceStack(Stack<e> s , e e ){
        Stack<e> tempStack1 = new Stack<>();
        while (!s.empty())
            tempStack1.push(s.pop());

        Stack<e> resStack = new Stack<>();
        while (!tempStack1.empty()){
            e element = tempStack1.pop();
            if (element.compareTo(e) <= 0)
                resStack.push(element);
        }

        return resStack;
    }
}
//////////////////////////////////////////////////////////////////////////////////////////
    
/*Question page 81 in Hen's pdf from exam*/    
public static <e extends  Comparable<e>> Stack<e> reduceStack(Stack<e> s , e e ){
        Stack<e> tempStack1 = new Stack<>();
        while (!s.empty())
            tempStack1.push(s.pop());

        Stack<e> resStack = new Stack<>();
        while (!tempStack1.empty()){
            e element = tempStack1.pop();
            if (element.compareTo(e) <= 0)
                resStack.push(element);
        }

        return resStack;
    }


