//////////////////////////////////////////////////////////////////////////////////
//2017 87 . Q4
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>


typedef struct fhotographers {
	int id;
	int maxdays;
	int recom;
	struct fhotographers* next;
}photographers;



void Node(photographers** Rhead, int id, int maxdays, int recom) {
	if (*Rhead == NULL) {
		photographers* head = (photographers*)malloc(sizeof(photographers));
		head->id = id;
		head->maxdays = maxdays;
		head->recom = recom;
		head->next = head;
		*Rhead = head;
	}
	else {
		photographers* temp = (photographers*)malloc(sizeof(photographers));
		temp->id = id;
		temp->maxdays = maxdays;
		temp->recom = recom;
		photographers* p = *Rhead;
		while (p->next != *Rhead) {
			p = p->next;
		}
		p->next = temp;
		temp->next = *Rhead;
	}
}

//1 for success o, 0 for not found id
int search(photographers** head , int id) {
	//if list is missing
	if ((*head) == NULL) {
		printf("List is missing , search and delete cannot be completed\n");
			return 0;
	}


	photographers* tmpptr = *head;
	do
	{
		if (id == tmpptr->id)
		{
			 delete(&tmpptr,head);
			 return 1;
		}

		tmpptr = tmpptr->next;
	} while (tmpptr != *head);
	if (tmpptr == *head)
	{
		printf("the id wasn't found");
	}

	return 0;

}

int delete (photographers** node, photographers** head) {
	photographers* tempprev = *node;
	//edge case only one node return null ptr
	if ((*node)->next == (*node)) {
		free((*node));
		(*head) = NULL;
		printf("the list has been deleted \n");
	}
	else
	{
		while (tempprev->next != *node) {
			tempprev = tempprev->next;
		}
		
		tempprev->next = (*node)->next;
		if ( *node == *head ) //here
			*head = (*node)->next;
		free((*node));
		
	}
	return 1;
}

//for testing
printlist(photographers** headptr) {
	photographers*temp = *headptr;
	do
	{
		if (temp == NULL) {
			break;
		}
		//testing
		printf("id: %d , Max days: %d ,recom :%d\n", temp->id, temp->maxdays, temp->recom);
		temp = temp->next;
	} while (temp != *headptr);

}

int main() {
	int i = 0;
	int temp = 1;
	int id = 0;
	int maxdays = 0;
	int recom = 0;
	photographers * head=0;
	photographers * tmpptr = 0;
	while ( id != -1 && maxdays != -1 && recom != -1)// -1 -1 -1 to stop entring
	{

			printf("Enter Id ,Maxdays, recom \nif you wish to stop enter -1 in all the fields \n");
			scanf(" %d  %d  %d", &id, &maxdays, &recom);
			
			Node(&head, id, maxdays, recom);
	

			
	}
	tmpptr = head;
	search(&head, -1);

	printlist(&head);

	search(&head,3);
	printlist(&head);
}



//////////////////////////////////////////////////////////////////////////////////
////2017 87 b . Q2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define summery(funcName,type)\
	type* funcName(type* arr ,int size) {\
			type* sum = (type*)malloc(sizeof(type));\
			*sum= 0;\
			int i = 0; \
			for(;i<size;i++){\
			*sum +=  arr[i];\
			}\
			return sum;\
	}



summery(intarrsum,int)


int main() {
	
	int test[] = {3,5,1,-10,13}; /*len =5*/
	int z = *intarrsum(test, 5);
	printf("The sum is %d ", z);
	

	return 666;
}

//////////////////////////////////////////////////////////////////////////////////
////2017 85 b . Q2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


#define positiveSum(funcName,type)\
	type* funcName(type* arr, int Len){\
		type sum = 0;\
		int i=0;\
		type* Newarr = (type*)malloc(sizeof(type)*Len);\
		for(;i<Len;i++){\
			sum+=arr[i];\
			if(sum<0)\
				Newarr[i]=0;\
			else\
				Newarr[i]=sum;\
		}\
		return Newarr;\
	}

positiveSum(intarr, int)

void printArray_(int *a, int Len) {
	for (int i = 0; i < Len; i++) printf("%d ", a[i]);
}




int main() {
	
	int test[] = {3,5,1,-10,13}; /*len =5*/
	printArray_(intarr(test, 5),5);
	
	
	


	return 666;
}


//////////////////////////////////////////////////////////////////////////////////
////2017 86 b . Q2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define arraysize 2// change here

//counts bits in array, the array size is fixed to 12 as requested


#define my_count(func_name,type)\
		int func_name(type* arr){\
		int i=0;\
		int temp = 0;\
		int countbits=0;\
		for(;i<arraysize;i++){\
				temp=arr[i];\
				while( temp > 0){\
					if(temp%10 == 0|| temp==1){\
						countbits++;}\
						temp=(temp/10);}	\
		}\
		return countbits;\
}	

my_count(intarray,float)

int main() {
	
	float a[] = { 10110110,10110001 }; //needs to be 9
	printf("count bits is:%d",intarray(a));
	return 666;
}


//////////////////////////////////////////////////////////////////////////////////
////2017 86 b . Q2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define arraysize 2// change here

//counts bits in array, the array size is fixed to 12 as requested


#define my_count(func_name,type)\
		int func_name(type* arr){\
		int i=0;\
		int mask= 1;\
		int temp = 0;\
		int countbits=0;\
		for(;i<arraysize;i++){\
				temp=arr[i];\
				while( temp > 0){\
					if(temp&mask){\
						countbits++;}\
						temp =temp>>1;}	\
		}\
		return countbits;\
}	

my_count(intarray,float)

int main() {
	
	float a[] = { 10110110,10110001 }; //needs to be 9
	printf("count bits is:%d",intarray(a));
	return 666;
}

//////////////////////////////////////////////////////////////////////////////////
////2017 84 b . Q2
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define my_count(func_name,type)\
		int func_name(type* arr,int size, type target){\
		int i =0;\
		for(;i< size;i++ ){\
		 if(arr[i] == target){\
			return i+1;}\
		}\
		printf("the number wasn't found ");\
		return 0 ;\
}

my_count(doubleseek,double)

int main() {
	
	double a[] = {1,3,10 }; 
	printf("%d", doubleseek(a, 3, 10));
	return 666;
}


//////////////////////////////////////////////////////////////////////////////////
////2017 84 a . Q4
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Members{
	int id;
	int price;
	int exp;
	struct Members* next;
	struct members* prev;
}members;


//testing proposes
void printstruct(members* node){
	//if there is no list 
	if (!node) {
		printf("there is no list\n");
		return;
	}
	while (node) {

		printf("id:%d \n", node->id);
		printf("price:%d \n", node->price);
		printf("exp:%d \n", node->exp);
		node = node->prev;
	}
}

void addnode(members** head,int id , int price, int exp) {
	members* temp = (members*)malloc(sizeof(members));
	if (!(*head)) {
		temp->id = id;
		temp->price = price;
		temp->exp= exp;
		temp->next = NULL;
		temp->prev = NULL;
		*head = temp;
	}
	else
	{
		//adds to end of list and becomes head 
		temp->id = id;
		temp->price = price;
		temp->exp = exp;
		temp->prev = *head;
		temp->next = NULL;
		(*head)->next = temp;
		*head = temp;
	}

}


//searching and removing a member by his id
void seekndistory(members** head,int id) {
	members* temp = *head;
	while (temp)
	{
		if (temp->id == id) {
			dellmem(temp,head);
			return;
		}
		temp = temp->prev;
	}
	printf("there is no memeber with the id %d on the list\n", id);
}

dellmem(members* dellnode, members** head) {
	members* tempprev = dellnode->prev;
	members* tempnext = dellnode->next;
	if (tempprev) {
		tempprev->next = tempnext;
	}
	if (tempnext) {
		tempnext->prev = tempprev;
	}
	//edge case delete the head
	if (dellnode->id == (*head)->id) {
		*head = tempprev;
		free(dellnode);
	}
	else
	{
		free(dellnode);
	}

}

int main() {

	members* head = NULL;
	int id = 0;
	int price =0;
	int exp = 0;

	while (id != -1) {
		printf("please enter the following details: id price and exp of the member \nenter -1 if you wish to stop\n");
		scanf(" %d %d %d", &id, &price, &exp);
		if (id != -1) {
			addnode(&head,id,price,exp);
			
		}
	}

	printstruct(head);
	seekndistory(&head,5);
	printstruct(head);


	return 1;
}
