
  Solutions for rec questions from finals of intro to cs and java openU
  Written by Leon Trestman

///////////////////////////////////////////////////////////////////////////
                    //2017 b4 93
    public static int cntTrueReg(boolean[][] mat) {
        return cntTrueReg(mat, 0, 0);
    }

    private static int cntTrueReg(boolean[][] mat, int i, int j) {
        if (j == mat[0].length) {
            j = 0;
            i = i + 1;
        }

        if (i == mat.length)
            return 0;

        if (mat[i][j] == false) {
            return 0 + cntTrueReg(mat, i, j + 1);
        } else {

            detected(mat, i, j);
            return 1 + cntTrueReg(mat, i, j + 1);
        }
    }

    private static void detected(boolean[][] mat, int i, int j) {
        if (mat[i][j] == true) {
            mat[i][j] = false;

            if (j != mat[0].length - 1) {
                detected(mat, i, j + 1);
            }
            if (j != 0) {
                detected(mat, i, j - 1);
            }
            if (i != mat.length - 1) {
                detected(mat, i + 1, j);
            }
            if (i != 0) {
                detected(mat, i - 1, j);
            }

        }
    }
///////////////////////////////////////////////////////////////////////////
                  // 2018 91 a
    public static int cheapestRoute(int[] stations) {
        return cheapestRoute(stations, 0);

    }

    private static int cheapestRoute(int[] stations, int i) {
        int op2;
        if (i >= stations.length)
            return 0;

        if (i == stations.length - 1) {
            return stations[i];
        }

        //op1  jumping 1
        int op1 = stations[i] + cheapestRoute(stations, i + 1);

        //op 2 jumping two
        if (i == stations.length - 2) {
            op2 = stations[i] + cheapestRoute(stations, i + 1);

        } else {

            op2 = stations[i] + cheapestRoute(stations, i + 2);
        }

        return (op1 > op2 ? op2 : op1);
    }

///////////////////////////////////////////////////////////////////////////
                    //2017 b1 90
        public static int KnapSack(Item[] items, int w) {
        return KnapSack(items, w, 0);
    }

    private static int KnapSack(Item[] items, int w, int i) {

        ///pull out item if overloaded.
        if (w < 0) {
            return -(items[i - 1].get_value());
        }
        if (w == 0 || i == items.length) {
            return 0;
        }

        //op1 first used
        int op1 = items[i].get_value() + KnapSack(items, w - items[i].get_weight(), i + 1);

        //op2 first isnt used
        int op2 = KnapSack(items, w, i + 1);
        int max = Math.max(op1, op2);
        return max;
    }

///////////////////////////////////////////////////////////////////////////
                // maman
/**
 *a method that calculates the longest "slope" in 2d matrix, meaning given a num (natural number)
 *  it check if there is -num of the current cell in the nearby cell(up/down/right/left) and continues if it found again.
 * in the end it returns the number of cells of longest found slope in the matrix.
 *
 * @param mat the 2d matrix
 * @param num the num that represents the difference were looking for.
 * @param i i index in matrix
 * @param j j index in matrix
 * @return the number of cells of longest slope found.
 */
private static int longestSlope(int[][] mat, int num, int i, int j) {

    int nextI = i;
    int nextJ = j+1;
    int currentMax =1;

    if (j == mat[0].length){
        nextI = i+1;
        nextJ = 0;
    }

    if (i == mat.length){
        return 0;
    }


    if (j !=mat[0].length) {
        currentMax = slopeCalc(mat, num, i, j);
    }
    int nextMax = longestSlope(mat,num,nextI,nextJ);
    return myMax(currentMax,nextMax);
}

//the checking algorithm.
private static int slopeCalc(int[][] mat, int num, int i, int j) {
    int max = 1;

    //check left
    if (j != 0) {
        if (mat[i][j] - mat[i][j - 1] == num) {
            max = myMax(max,1+ slopeCalc(mat, num, i, j - 1));
        }
    }

    //check right
    if (j != mat[0].length-1) {
        if (mat[i][j] - mat[i][j + 1] == num) {
            max = myMax(max,1+ slopeCalc(mat, num, i, j + 1));
        }
    }
    //check up
    if (i != 0) {
        if (mat[i][j] - mat[i - 1][j] == num) {
            max = myMax(max,1+ slopeCalc(mat, num, i - 1, j));
        }
    }

    //check down
    if (i != mat.length-1) {
        if (mat[i][j] - mat[i + 1][j] == num) {
            max = myMax(max,1+ slopeCalc(mat, num, i + 1, j));
        }
    }

    return max;
}
        // MathMax not allowed in project
private static int myMax(int a, int b) {
    if (a < b) {
        return b;
    } else {
        return a;
    }
}

///////////////////////////////////////////////////////////////////////////

public static int edit(String str1, String str2) {

    return edit(str1, str2, 0, 0);
}

private static int edit(String str1, String str2, int i1, int i2) {

    int op1, op2;
    //reaching the end of the strings;
    if (str1.length() == i1 || str2.length() == i2) {
        return Math.abs((str1.length() - i1) - (str2.length() - i2));
    }

    if (str1.charAt(i1) == str2.charAt(i2)) {
        return edit(str1, str2, i1 + 1, i2 + 1);
    } else {

        //op1 change in the first string
        op1 = 1 + edit(str1, str2, i1 + 1, i2);

        //op2 change in the second string
        op2 = 1 + edit(str1, str2, i1, i2 + 1);
    }
    //returning the minimum
    return (op1 > op2 ? op2 : op1);
}

///////////////////////////////////////////////////////////////////////////
                ///2016 87 6a
public static int count (int sum){

   return  count(sum,1);
 }

 private static int count (int sum , int input){

     //end
     if ( sum == 0) {
         return 1;
     }

     if (sum < 0 || input>sum )
         return 0;

     // op 1 using the the input
     // op 2 not using the input
     return count(sum-input , input+1) + count(sum ,input +1);

 }

///////////////////////////////////////////////////////////////////////////
                  //2017 85 4a
public static int oneFiveSeven(int n) {

    //end
    if (n == 0) {
        return 0;
    }

    if (n < 0) {
        return Integer.MAX_VALUE;
    }

    //op1 using 1
    int op1 = 1 + oneFiveSeven(n - 1);

    //op2 using 5
    int op2 = 1 + oneFiveSeven(n - 5);

    //op3 using 7
    int op3 = 1 + oneFiveSeven(n - 7);

    int min = op1;

    if (min > op2 && op2 > 0) min = op2;
    if (min > op3 && op3 > 0) min = op3;

    return min;
}
///////////////////////////////////////////////////////////////////////////
                    // 2016a 87 6a
public static int minDiff(int[] arr) {
    return minDiff(arr, 0, 0, 0);
}

private static int minDiff(int[] arr, int i, int sum1, int sum2) {

    int op1, op2;
    //end
    if (i == arr.length) {
        return Math.abs(sum1 - sum2);
    }

    //op 1 put the arr[i] in the first "array"
    //op 2 put the arr[i] in the second "array"
    op1 = minDiff(arr, i + 1, sum1 + arr[i], sum2);
    op2 = minDiff(arr, i + 1, sum1, sum2 + arr[i]);

    return Math.min(op1, op2);
}
///////////////////////////////////////////////////////////////////////////
            //this is a test